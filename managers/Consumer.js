// Generated by CoffeeScript 1.10.0
var Consumer, async, config,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

async = require('async');

config = require('config');

Consumer = (function() {
  function Consumer(sequelize, wagner) {
    this.sequelize = sequelize;
    this.wagner = wagner;
    this.removeMessage = bind(this.removeMessage, this);
    this.updateMessage = bind(this.updateMessage, this);
    this.lockMessage = bind(this.lockMessage, this);
    this.processMessage = bind(this.processMessage, this);
    this.getMessages = bind(this.getMessages, this);
    this.Message = this.wagner.get('message');
    this.Queue = this.wagner.get('Queue');
  }

  Consumer.prototype.getMessages = function(callback) {
    return async.map(this.Queue.list, this.processMessage, (function(_this) {
      return function(err, result) {
        if (!err) {
          return callback(null, "Processed message");
        } else {
          return callback(err);
        }
      };
    })(this));
  };

  Consumer.prototype.processMessage = function(message, callback) {
    return async.waterfall([async.apply(this.lockMessage, message), this.transformMessage, this.updateMessage, this.removeMessage], (function(_this) {
      return function(err, result) {
        if (!err) {
          return callback(null, result);
        } else {
          if (message.get('lock')) {
            message.setDataValue('lock', false);
          }
          return callback(null, err);
        }
      };
    })(this));
  };

  Consumer.prototype.lockMessage = function(message, callback) {
    if (!message.get('lock')) {
      message.setDataValue('lock', true);
      return callback(null, message);
    } else {
      return callback("Message is already locked.");
    }
  };


  /*transformMessage: (message,callback) =>
    console.log(message.get('body'))
    return callback(null, message)
   */

  Consumer.prototype.transformMessage = async.timeout((function(message, callback) {

    /*replace this with some processing script */
    console.log(message.get('body'));
    return callback(null, message);
  }), config.get('timeout'));

  Consumer.prototype.updateMessage = function(message, callback) {
    return this.Message.update({
      processed: true
    }, {
      where: {
        id: message.get('id')
      }
    }).then((function(_this) {
      return function(updateStatus) {
        console.log('Message updated.');
        message.setDataValue('processed', true);
        return callback(null, message);
      };
    })(this))["catch"]((function(_this) {
      return function(err) {
        console.log("Got error while updating message record.");
        console.log(err);
        return callback(err.message + " Got error while updating message record.");
      };
    })(this));
  };

  Consumer.prototype.removeMessage = function(message, callback) {
    this.Queue.list.forEach((function(_this) {
      return function(msgObj, index) {
        if (msgObj.get('id') === message.get('id')) {
          return delete _this.Queue.list[index];
        }
      };
    })(this));
    return callback(null, "Removed message");
  };

  return Consumer;

})();

module.exports = Consumer;
